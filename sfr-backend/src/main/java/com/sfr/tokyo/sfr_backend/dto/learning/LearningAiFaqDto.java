package com.sfr.tokyo.sfr_backend.dto.learning;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.sfr.tokyo.sfr_backend.entity.learning.LearningAiFaq;
import jakarta.validation.constraints.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import lombok.Builder;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

/**
 * 学習AI FAQ DTO
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
@JsonInclude(JsonInclude.Include.NON_NULL)
public class LearningAiFaqDto {

    private Long id;

    @NotBlank(message = "質問は必須です")
    @Size(max = 500, message = "質問は500文字以内で入力してください")
    private String question;

    @NotBlank(message = "回答は必須です")
    @Size(max = 5000, message = "回答は5000文字以内で入力してください")
    private String answer;

    @NotNull(message = "カテゴリーは必須です")
    private LearningAiFaq.FaqCategory category;

    @Size(max = 100, message = "サブカテゴリーは100文字以内で入力してください")
    private String subCategory;

    @Size(max = 500, message = "タグは500文字以内で入力してください")
    private String tags;

    @NotNull(message = "優先度は必須です")
    @Min(value = 1, message = "優先度は1以上で設定してください")
    @Max(value = 10, message = "優先度は10以下で設定してください")
    private Integer priority;

    @NotNull(message = "ステータスは必須です")
    private LearningAiFaq.FaqStatus status;

    @NotBlank(message = "言語は必須です")
    @Pattern(regexp = "^(ja|en|zh|ko)$", message = "対応言語: ja, en, zh, ko")
    private String language;

    private String searchVector;

    @DecimalMin(value = "0.0", message = "人気度スコアは0.0以上で設定してください")
    @DecimalMax(value = "10.0", message = "人気度スコアは10.0以下で設定してください")
    private BigDecimal popularityScore;

    @DecimalMin(value = "0.0", message = "有用性スコアは0.0以上で設定してください")
    @DecimalMax(value = "10.0", message = "有用性スコアは10.0以下で設定してください")
    private BigDecimal usefulnessScore;

    @Min(value = 0, message = "閲覧数は0以上で設定してください")
    private Long viewCount;

    @Min(value = 0, message = "役に立った数は0以上で設定してください")
    private Long helpfulCount;

    @Min(value = 0, message = "役に立たなかった数は0以上で設定してください")
    private Long notHelpfulCount;

    private Boolean isAutoGenerated;

    @DecimalMin(value = "0.0", message = "AI信頼度は0.0以上で設定してください")
    @DecimalMax(value = "1.0", message = "AI信頼度は1.0以下で設定してください")
    private BigDecimal aiConfidence;

    @Size(max = 100, message = "AIモデル名は100文字以内で入力してください")
    private String aiModel;

    @Size(max = 10000, message = "AI生成元データは10000文字以内で入力してください")
    private String aiSourceData;

    @Size(max = 5000, message = "AIメタデータは5000文字以内で入力してください")
    private String aiMetadata;

    @Size(max = 500, message = "関連FAQ IDsは500文字以内で入力してください")
    private String relatedFaqIds;

    @Size(max = 1000, message = "キーワードは1000文字以内で入力してください")
    private String keywords;

    private UUID lastUpdatedBy;

    private UUID approvedBy;

    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    private LocalDateTime approvedAt;

    @Size(max = 500, message = "無効化理由は500文字以内で入力してください")
    private String deactivationReason;

    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    private LocalDateTime lastAiUpdateAt;

    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    private LocalDateTime nextAiUpdateAt;

    private Boolean autoUpdateEnabled;

    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    private LocalDateTime deletedAt;

    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    private LocalDateTime createdAt;

    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    private LocalDateTime updatedAt;

    // ========== 追加フィールド（計算値など） ==========

    /**
     * カテゴリー表示名
     */
    private String categoryDisplayName;

    /**
     * ステータス表示名
     */
    private String statusDisplayName;

    /**
     * 関連FAQ一覧（ID配列）
     */
    private List<Long> relatedFaqIdList;

    /**
     * タグ一覧（配列）
     */
    private List<String> tagList;

    /**
     * キーワード一覧（配列）
     */
    private List<String> keywordList;

    /**
     * 評価率（役に立った投票の割合）
     */
    private Double helpfulRatio;

    /**
     * 総投票数
     */
    private Long totalVotes;

    /**
     * 公開中フラグ
     */
    private Boolean isPublished;

    /**
     * 削除済みフラグ
     */
    private Boolean isDeleted;

    /**
     * AI生成済みフラグ
     */
    private Boolean isAiGenerated;

    /**
     * 更新必要フラグ
     */
    private Boolean needsUpdate;

    /**
     * 承認待ちフラグ
     */
    private Boolean isPendingApproval;

    /**
     * 自動更新対象フラグ
     */
    private Boolean isAutoUpdateTarget;

    // ========== 内部クラス ==========

    /**
     * FAQ要約情報
     */
    @Data
    @Builder
    @NoArgsConstructor
    @AllArgsConstructor
    public static class FaqSummary {
        private Long id;
        private String question;
        private LearningAiFaq.FaqCategory category;
        private Integer priority;
        private LearningAiFaq.FaqStatus status;
        private BigDecimal popularityScore;
        private BigDecimal usefulnessScore;
        private Long viewCount;
        private Boolean isAutoGenerated;

        @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
        private LocalDateTime createdAt;

        @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
        private LocalDateTime updatedAt;
    }

    /**
     * FAQ検索結果
     */
    @Data
    @Builder
    @NoArgsConstructor
    @AllArgsConstructor
    public static class FaqSearchResult {
        private Long id;
        private String question;
        private String answer;
        private LearningAiFaq.FaqCategory category;
        private String subCategory;
        private List<String> tags;
        private BigDecimal relevanceScore;
        private BigDecimal popularityScore;
        private BigDecimal usefulnessScore;
        private Long viewCount;
        private Boolean isAutoGenerated;
        private String highlightedQuestion;
        private String highlightedAnswer;
    }

    /**
     * FAQ統計情報
     */
    @Data
    @Builder
    @NoArgsConstructor
    @AllArgsConstructor
    public static class FaqStatistics {
        private Long totalFaqs;
        private Long publishedFaqs;
        private Long draftFaqs;
        private Long autoGeneratedFaqs;
        private Long needsUpdateFaqs;
        private BigDecimal averageUsefulnessScore;
        private BigDecimal averagePopularityScore;
        private Long totalViews;
        private Long totalHelpfulVotes;
        private Long totalNotHelpfulVotes;
        private Double overallHelpfulRatio;

        @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
        private LocalDateTime lastUpdated;
    }

    /**
     * FAQ作成・更新リクエスト
     */
    @Data
    @Builder
    @NoArgsConstructor
    @AllArgsConstructor
    public static class FaqRequest {
        @NotBlank(message = "質問は必須です")
        @Size(max = 500, message = "質問は500文字以内で入力してください")
        private String question;

        @NotBlank(message = "回答は必須です")
        @Size(max = 5000, message = "回答は5000文字以内で入力してください")
        private String answer;

        @NotNull(message = "カテゴリーは必須です")
        private LearningAiFaq.FaqCategory category;

        @Size(max = 100, message = "サブカテゴリーは100文字以内で入力してください")
        private String subCategory;

        private List<String> tags;

        @NotNull(message = "優先度は必須です")
        @Min(value = 1, message = "優先度は1以上で設定してください")
        @Max(value = 10, message = "優先度は10以下で設定してください")
        private Integer priority;

        @NotBlank(message = "言語は必須です")
        @Pattern(regexp = "^(ja|en|zh|ko)$", message = "対応言語: ja, en, zh, ko")
        private String language;

        private List<String> keywords;

        private Boolean autoUpdateEnabled;
    }

    /**
     * AI生成リクエスト
     */
    @Data
    @Builder
    @NoArgsConstructor
    @AllArgsConstructor
    public static class AiGenerationRequest {
        @NotNull(message = "カテゴリーは必須です")
        private LearningAiFaq.FaqCategory category;

        @Size(max = 100, message = "サブカテゴリーは100文字以内で入力してください")
        private String subCategory;

        @NotBlank(message = "言語は必須です")
        @Pattern(regexp = "^(ja|en|zh|ko)$", message = "対応言語: ja, en, zh, ko")
        private String language;

        private List<String> sourceTopics;

        private List<String> keywords;

        @Min(value = 1, message = "生成数は1以上で設定してください")
        @Max(value = 10, message = "生成数は10以下で設定してください")
        private Integer generateCount;

        @DecimalMin(value = "0.0", message = "最小信頼度は0.0以上で設定してください")
        @DecimalMax(value = "1.0", message = "最小信頼度は1.0以下で設定してください")
        private BigDecimal minConfidence;

        private String aiModel;

        private String additionalContext;
    }

    /**
     * 評価リクエスト
     */
    @Data
    @Builder
    @NoArgsConstructor
    @AllArgsConstructor
    public static class RatingRequest {
        @NotNull(message = "FAQ IDは必須です")
        private Long faqId;

        @NotNull(message = "評価は必須です")
        private Boolean isHelpful;

        private String feedback;

        private UUID userId;
    }
}
