package com.sfr.tokyo.sfr_backend.repository.learning;

import com.sfr.tokyo.sfr_backend.entity.learning.LearningAiFaq;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

/**
 * 学習AI FAQ リポジトリ
 */
@Repository
public interface LearningAiFaqRepository extends JpaRepository<LearningAiFaq, Long> {

    // ========== 基本検索 ==========

    /**
     * IDでFAQ取得（削除済み除外）
     */
    @Query("SELECT f FROM LearningAiFaq f WHERE f.id = :id AND f.deletedAt IS NULL")
    Optional<LearningAiFaq> findByIdAndNotDeleted(@Param("id") Long id);

    /**
     * カテゴリー別FAQ取得
     */
    @Query("SELECT f FROM LearningAiFaq f WHERE f.category = :category AND f.deletedAt IS NULL ORDER BY f.priority DESC, f.popularityScore DESC")
    List<LearningAiFaq> findByCategory(@Param("category") LearningAiFaq.FaqCategory category);

    /**
     * カテゴリー別FAQ取得（Page）
     */
    @Query("SELECT f FROM LearningAiFaq f WHERE f.category = :category AND f.deletedAt IS NULL ORDER BY f.priority DESC, f.popularityScore DESC")
    Page<LearningAiFaq> findByCategory(@Param("category") LearningAiFaq.FaqCategory category, Pageable pageable);

    /**
     * ステータス別FAQ取得
     */
    @Query("SELECT f FROM LearningAiFaq f WHERE f.status = :status AND f.deletedAt IS NULL ORDER BY f.updatedAt DESC")
    List<LearningAiFaq> findByStatus(@Param("status") LearningAiFaq.FaqStatus status);

    /**
     * ステータス別FAQ取得（Page）
     */
    @Query("SELECT f FROM LearningAiFaq f WHERE f.status = :status AND f.deletedAt IS NULL ORDER BY f.updatedAt DESC")
    Page<LearningAiFaq> findByStatus(@Param("status") LearningAiFaq.FaqStatus status, Pageable pageable);

    /**
     * 公開中FAQ取得
     */
    @Query("SELECT f FROM LearningAiFaq f WHERE f.status = 'PUBLISHED' AND f.deletedAt IS NULL ORDER BY f.priority DESC, f.popularityScore DESC")
    List<LearningAiFaq> findPublishedFaqs();

    /**
     * 公開中FAQ取得（Page）
     */
    @Query("SELECT f FROM LearningAiFaq f WHERE f.status = 'PUBLISHED' AND f.deletedAt IS NULL ORDER BY f.priority DESC, f.popularityScore DESC")
    Page<LearningAiFaq> findPublishedFaqs(Pageable pageable);

    /**
     * 言語別FAQ取得
     */
    @Query("SELECT f FROM LearningAiFaq f WHERE f.language = :language AND f.deletedAt IS NULL ORDER BY f.priority DESC, f.popularityScore DESC")
    Page<LearningAiFaq> findByLanguage(@Param("language") String language, Pageable pageable);

    // ========== AI関連検索 ==========

    /**
     * AI生成FAQ取得
     */
    @Query("SELECT f FROM LearningAiFaq f WHERE f.isAutoGenerated = true AND f.deletedAt IS NULL ORDER BY f.aiConfidence DESC, f.createdAt DESC")
    List<LearningAiFaq> findAiGeneratedFaqs();

    /**
     * AI生成FAQ取得（Page）
     */
    @Query("SELECT f FROM LearningAiFaq f WHERE f.isAutoGenerated = true AND f.deletedAt IS NULL ORDER BY f.aiConfidence DESC, f.createdAt DESC")
    Page<LearningAiFaq> findAiGeneratedFaqs(Pageable pageable);

    /**
     * 高信頼度AI生成FAQ取得
     */
    @Query("SELECT f FROM LearningAiFaq f WHERE f.isAutoGenerated = true AND f.aiConfidence >= :minConfidence AND f.deletedAt IS NULL ORDER BY f.aiConfidence DESC")
    List<LearningAiFaq> findHighConfidenceAiFaqs(@Param("minConfidence") BigDecimal minConfidence);

    /**
     * AI更新対象FAQ取得
     */
    @Query("SELECT f FROM LearningAiFaq f WHERE f.autoUpdateEnabled = true AND f.nextAiUpdateAt <= :now AND f.deletedAt IS NULL ORDER BY f.nextAiUpdateAt ASC")
    List<LearningAiFaq> findFaqsForAiUpdate(@Param("now") LocalDateTime now);

    /**
     * AI更新が必要なFAQ取得
     */
    @Query("SELECT f FROM LearningAiFaq f WHERE f.status = 'NEEDS_UPDATE' AND f.deletedAt IS NULL ORDER BY f.priority DESC, f.updatedAt ASC")
    List<LearningAiFaq> findFaqsNeedingUpdate();

    // ========== 検索機能 ==========

    /**
     * 全文検索
     */
    @Query("SELECT f FROM LearningAiFaq f WHERE " +
            "(LOWER(f.question) LIKE LOWER(CONCAT('%', :keyword, '%')) OR " +
            "LOWER(f.answer) LIKE LOWER(CONCAT('%', :keyword, '%')) OR " +
            "LOWER(f.searchVector) LIKE LOWER(CONCAT('%', :keyword, '%'))) AND " +
            "f.status = 'PUBLISHED' AND f.deletedAt IS NULL " +
            "ORDER BY f.popularityScore DESC, f.usefulnessScore DESC")
    Page<LearningAiFaq> searchByKeyword(@Param("keyword") String keyword, Pageable pageable);

    /**
     * 高度な検索
     */
    @Query("SELECT f FROM LearningAiFaq f WHERE " +
            "(:category IS NULL OR f.category = :category) AND " +
            "(:subCategory IS NULL OR LOWER(f.subCategory) LIKE LOWER(CONCAT('%', :subCategory, '%'))) AND " +
            "(:keyword IS NULL OR LOWER(f.searchVector) LIKE LOWER(CONCAT('%', :keyword, '%'))) AND " +
            "(:language IS NULL OR f.language = :language) AND " +
            "(:status IS NULL OR f.status = :status) AND " +
            "f.deletedAt IS NULL " +
            "ORDER BY f.priority DESC, f.popularityScore DESC, f.usefulnessScore DESC")
    Page<LearningAiFaq> advancedSearch(
            @Param("category") LearningAiFaq.FaqCategory category,
            @Param("subCategory") String subCategory,
            @Param("keyword") String keyword,
            @Param("language") String language,
            @Param("status") LearningAiFaq.FaqStatus status,
            Pageable pageable);

    /**
     * タグ検索
     */
    @Query("SELECT f FROM LearningAiFaq f WHERE " +
            "LOWER(f.tags) LIKE LOWER(CONCAT('%', :tag, '%')) AND " +
            "f.status = 'PUBLISHED' AND f.deletedAt IS NULL " +
            "ORDER BY f.popularityScore DESC")
    List<LearningAiFaq> findByTag(@Param("tag") String tag);

    /**
     * キーワード検索
     */
    @Query("SELECT f FROM LearningAiFaq f WHERE " +
            "LOWER(f.keywords) LIKE LOWER(CONCAT('%', :keyword, '%')) AND " +
            "f.status = 'PUBLISHED' AND f.deletedAt IS NULL " +
            "ORDER BY f.popularityScore DESC")
    List<LearningAiFaq> findByKeyword(@Param("keyword") String keyword);

    /**
     * 関連FAQ検索
     */
    @Query("SELECT f FROM LearningAiFaq f WHERE " +
            "f.category = :category AND f.id != :excludeId AND " +
            "f.status = 'PUBLISHED' AND f.deletedAt IS NULL " +
            "ORDER BY f.popularityScore DESC, f.usefulnessScore DESC")
    List<LearningAiFaq> findRelatedFaqs(@Param("category") LearningAiFaq.FaqCategory category,
            @Param("excludeId") Long excludeId, Pageable pageable);

    // ========== 品質・人気度関連 ==========

    /**
     * 人気FAQ取得
     */
    @Query("SELECT f FROM LearningAiFaq f WHERE f.status = 'PUBLISHED' AND f.deletedAt IS NULL ORDER BY f.popularityScore DESC, f.viewCount DESC")
    List<LearningAiFaq> findPopularFaqs(Pageable pageable);

    /**
     * 高品質FAQ取得
     */
    @Query("SELECT f FROM LearningAiFaq f WHERE f.usefulnessScore >= :minScore AND f.status = 'PUBLISHED' AND f.deletedAt IS NULL ORDER BY f.usefulnessScore DESC")
    List<LearningAiFaq> findHighQualityFaqs(@Param("minScore") BigDecimal minScore, Pageable pageable);

    /**
     * 最も閲覧されたFAQ取得
     */
    @Query("SELECT f FROM LearningAiFaq f WHERE f.status = 'PUBLISHED' AND f.deletedAt IS NULL ORDER BY f.viewCount DESC")
    List<LearningAiFaq> findMostViewedFaqs(Pageable pageable);

    /**
     * 最も役に立ったFAQ取得
     */
    @Query("SELECT f FROM LearningAiFaq f WHERE f.status = 'PUBLISHED' AND f.deletedAt IS NULL ORDER BY f.helpfulCount DESC, f.usefulnessScore DESC")
    List<LearningAiFaq> findMostHelpfulFaqs(Pageable pageable);

    /**
     * 最近作成されたFAQ取得
     */
    @Query("SELECT f FROM LearningAiFaq f WHERE f.status = 'PUBLISHED' AND f.deletedAt IS NULL ORDER BY f.createdAt DESC")
    List<LearningAiFaq> findRecentFaqs(Pageable pageable);

    /**
     * 最近更新されたFAQ取得
     */
    @Query("SELECT f FROM LearningAiFaq f WHERE f.status = 'PUBLISHED' AND f.deletedAt IS NULL ORDER BY f.updatedAt DESC")
    List<LearningAiFaq> findRecentlyUpdatedFaqs(Pageable pageable);

    // ========== 更新操作 ==========

    /**
     * 閲覧数増加
     */
    @Modifying
    @Query("UPDATE LearningAiFaq f SET f.viewCount = f.viewCount + 1, f.updatedAt = CURRENT_TIMESTAMP WHERE f.id = :id")
    int incrementViewCount(@Param("id") Long id);

    /**
     * 役に立った投票数増加
     */
    @Modifying
    @Query("UPDATE LearningAiFaq f SET f.helpfulCount = f.helpfulCount + 1, f.updatedAt = CURRENT_TIMESTAMP WHERE f.id = :id")
    int incrementHelpfulCount(@Param("id") Long id);

    /**
     * 役に立たなかった投票数増加
     */
    @Modifying
    @Query("UPDATE LearningAiFaq f SET f.notHelpfulCount = f.notHelpfulCount + 1, f.updatedAt = CURRENT_TIMESTAMP WHERE f.id = :id")
    int incrementNotHelpfulCount(@Param("id") Long id);

    /**
     * 人気度スコア更新
     */
    @Modifying
    @Query("UPDATE LearningAiFaq f SET f.popularityScore = :score, f.updatedAt = CURRENT_TIMESTAMP WHERE f.id = :id")
    int updatePopularityScore(@Param("id") Long id, @Param("score") BigDecimal score);

    /**
     * 有用性スコア更新
     */
    @Modifying
    @Query("UPDATE LearningAiFaq f SET f.usefulnessScore = :score, f.updatedAt = CURRENT_TIMESTAMP WHERE f.id = :id")
    int updateUsefulnessScore(@Param("id") Long id, @Param("score") BigDecimal score);

    /**
     * ステータス更新
     */
    @Modifying
    @Query("UPDATE LearningAiFaq f SET f.status = :status, f.lastUpdatedBy = :updatedBy, f.updatedAt = CURRENT_TIMESTAMP WHERE f.id = :id")
    int updateStatus(@Param("id") Long id, @Param("status") LearningAiFaq.FaqStatus status,
            @Param("updatedBy") UUID updatedBy);

    /**
     * 承認処理
     */
    @Modifying
    @Query("UPDATE LearningAiFaq f SET f.status = 'PUBLISHED', f.approvedBy = :approver, f.approvedAt = CURRENT_TIMESTAMP, f.updatedAt = CURRENT_TIMESTAMP WHERE f.id = :id")
    int approveFaq(@Param("id") Long id, @Param("approver") UUID approver);

    /**
     * AI更新日時設定
     */
    @Modifying
    @Query("UPDATE LearningAiFaq f SET f.lastAiUpdateAt = CURRENT_TIMESTAMP, f.nextAiUpdateAt = :nextUpdate, f.updatedAt = CURRENT_TIMESTAMP WHERE f.id = :id")
    int updateAiUpdateTimestamp(@Param("id") Long id, @Param("nextUpdate") LocalDateTime nextUpdate);

    /**
     * 検索ベクトル更新
     */
    @Modifying
    @Query("UPDATE LearningAiFaq f SET f.searchVector = :searchVector, f.updatedAt = CURRENT_TIMESTAMP WHERE f.id = :id")
    int updateSearchVector(@Param("id") Long id, @Param("searchVector") String searchVector);

    /**
     * 論理削除
     */
    @Modifying
    @Query("UPDATE LearningAiFaq f SET f.deletedAt = CURRENT_TIMESTAMP, f.updatedAt = CURRENT_TIMESTAMP WHERE f.id = :id")
    int softDelete(@Param("id") Long id);

    /**
     * 削除取り消し
     */
    @Modifying
    @Query("UPDATE LearningAiFaq f SET f.deletedAt = NULL, f.updatedAt = CURRENT_TIMESTAMP WHERE f.id = :id")
    int restore(@Param("id") Long id);

    // ========== 統計・カウント ==========

    /**
     * カテゴリー別FAQ数
     */
    @Query("SELECT COUNT(f) FROM LearningAiFaq f WHERE f.category = :category AND f.deletedAt IS NULL")
    Long countByCategory(@Param("category") LearningAiFaq.FaqCategory category);

    /**
     * ステータス別FAQ数
     */
    @Query("SELECT COUNT(f) FROM LearningAiFaq f WHERE f.status = :status AND f.deletedAt IS NULL")
    Long countByStatus(@Param("status") LearningAiFaq.FaqStatus status);

    /**
     * 言語別FAQ数
     */
    @Query("SELECT COUNT(f) FROM LearningAiFaq f WHERE f.language = :language AND f.deletedAt IS NULL")
    Long countByLanguage(@Param("language") String language);

    /**
     * AI生成FAQ数
     */
    @Query("SELECT COUNT(f) FROM LearningAiFaq f WHERE f.isAutoGenerated = true AND f.deletedAt IS NULL")
    Long countAiGeneratedFaqs();

    /**
     * 期間別FAQ作成数
     */
    @Query("SELECT CAST(f.createdAt AS DATE) as date, COUNT(f) as count FROM LearningAiFaq f WHERE " +
            "f.createdAt BETWEEN :fromDate AND :toDate AND f.deletedAt IS NULL " +
            "GROUP BY CAST(f.createdAt AS DATE) ORDER BY date")
    List<Map<String, Object>> getFaqCountByDateRange(@Param("fromDate") LocalDateTime fromDate,
            @Param("toDate") LocalDateTime toDate);

    /**
     * カテゴリー別統計
     */
    @Query("SELECT f.category as category, COUNT(f) as count, AVG(f.popularityScore) as avgPopularity, " +
            "AVG(f.usefulnessScore) as avgUsefulness, SUM(f.viewCount) as totalViews FROM LearningAiFaq f " +
            "WHERE f.deletedAt IS NULL GROUP BY f.category ORDER BY count DESC")
    List<Map<String, Object>> getCategoryStatistics();

    /**
     * 全体統計
     */
    @Query("SELECT COUNT(f) as totalFaqs, " +
            "COUNT(CASE WHEN f.status = 'PUBLISHED' THEN 1 END) as publishedFaqs, " +
            "COUNT(CASE WHEN f.status = 'DRAFT' THEN 1 END) as draftFaqs, " +
            "COUNT(CASE WHEN f.isAutoGenerated = true THEN 1 END) as aiGeneratedFaqs, " +
            "COUNT(CASE WHEN f.status = 'NEEDS_UPDATE' THEN 1 END) as needsUpdateFaqs, " +
            "AVG(f.usefulnessScore) as avgUsefulnessScore, " +
            "AVG(f.popularityScore) as avgPopularityScore, " +
            "SUM(f.viewCount) as totalViews, " +
            "SUM(f.helpfulCount) as totalHelpfulVotes, " +
            "SUM(f.notHelpfulCount) as totalNotHelpfulVotes " +
            "FROM LearningAiFaq f WHERE f.deletedAt IS NULL")
    Map<String, Object> getOverallStatistics();

    // ========== バッチ処理 ==========

    /**
     * 古いFAQのアーカイブ
     */
    @Modifying
    @Query("UPDATE LearningAiFaq f SET f.status = 'ARCHIVED', f.updatedAt = CURRENT_TIMESTAMP WHERE " +
            "f.updatedAt < :cutoffDate AND f.status = 'PUBLISHED' AND f.viewCount < :minViewCount AND f.deletedAt IS NULL")
    int archiveOldFaqs(@Param("cutoffDate") LocalDateTime cutoffDate, @Param("minViewCount") Long minViewCount);

    /**
     * 低品質FAQのマーク
     */
    @Modifying
    @Query("UPDATE LearningAiFaq f SET f.status = 'NEEDS_UPDATE', f.updatedAt = CURRENT_TIMESTAMP WHERE " +
            "f.usefulnessScore < :minScore AND f.status = 'PUBLISHED' AND f.deletedAt IS NULL")
    int markLowQualityFaqs(@Param("minScore") BigDecimal minScore);

    /**
     * 人気度スコアの再計算
     */
    @Modifying
    @Query("UPDATE LearningAiFaq f SET " +
            "f.popularityScore = (f.viewCount * 0.3 + f.helpfulCount * 2.0 + f.usefulnessScore * 1.5) / 3.8, " +
            "f.updatedAt = CURRENT_TIMESTAMP WHERE f.deletedAt IS NULL")
    int recalculatePopularityScores();

    /**
     * 有用性スコアの再計算
     */
    @Modifying
    @Query("UPDATE LearningAiFaq f SET " +
            "f.usefulnessScore = CASE WHEN (f.helpfulCount + f.notHelpfulCount) > 0 " +
            "THEN (f.helpfulCount * 10.0) / (f.helpfulCount + f.notHelpfulCount) " +
            "ELSE 0.0 END, " +
            "f.updatedAt = CURRENT_TIMESTAMP WHERE f.deletedAt IS NULL")
    int recalculateUsefulnessScores();

    /**
     * 検索ベクトルの一括更新
     */
    @Modifying
    @Query("UPDATE LearningAiFaq f SET " +
            "f.searchVector = LOWER(CONCAT(f.question, ' ', f.answer, ' ', f.category, ' ', " +
            "COALESCE(f.subCategory, ''), ' ', COALESCE(f.tags, ''), ' ', COALESCE(f.keywords, ''))), " +
            "f.updatedAt = CURRENT_TIMESTAMP WHERE f.deletedAt IS NULL")
    int updateAllSearchVectors();
}
