package com.sfr.tokyo.sfr_backend.entity.learning;

import jakarta.persistence.*;
import jakarta.validation.constraints.*;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

/**
 * 学習AI FAQ エンティティ
 * AI によって自動生成・更新される FAQ システム
 */
@Entity
@Table(name = "learning_ai_faq", indexes = {
        @Index(name = "idx_category_priority", columnList = "category, priority DESC"),
        @Index(name = "idx_status_updated", columnList = "status, updatedAt DESC"),
        @Index(name = "idx_search_vector", columnList = "searchVector"),
        @Index(name = "idx_popularity_score", columnList = "popularityScore DESC"),
        @Index(name = "idx_usefulness_score", columnList = "usefulnessScore DESC"),
        @Index(name = "idx_created_at", columnList = "createdAt DESC"),
        @Index(name = "idx_auto_generated", columnList = "isAutoGenerated, aiConfidence DESC"),
        @Index(name = "idx_language_status", columnList = "language, status"),
        @Index(name = "idx_tags", columnList = "tags"),
        @Index(name = "idx_view_count", columnList = "viewCount DESC")
})
@Data
@EqualsAndHashCode(callSuper = false)
@ToString(exclude = { "aiMetadata" })
public class LearningAiFaq {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;

    /**
     * FAQ質問
     */
    @Column(name = "question", nullable = false, length = 500)
    @NotBlank(message = "質問は必須です")
    @Size(max = 500, message = "質問は500文字以内で入力してください")
    private String question;

    /**
     * FAQ回答
     */
    @Column(name = "answer", nullable = false, columnDefinition = "TEXT")
    @NotBlank(message = "回答は必須です")
    @Size(max = 5000, message = "回答は5000文字以内で入力してください")
    private String answer;

    /**
     * カテゴリー
     */
    @Column(name = "category", nullable = false, length = 100)
    @NotBlank(message = "カテゴリーは必須です")
    @Enumerated(EnumType.STRING)
    private FaqCategory category;

    /**
     * サブカテゴリー
     */
    @Column(name = "sub_category", length = 100)
    @Size(max = 100, message = "サブカテゴリーは100文字以内で入力してください")
    private String subCategory;

    /**
     * タグ（カンマ区切り）
     */
    @Column(name = "tags", length = 500)
    @Size(max = 500, message = "タグは500文字以内で入力してください")
    private String tags;

    /**
     * 優先度（1-10、10が最高）
     */
    @Column(name = "priority", nullable = false)
    @NotNull(message = "優先度は必須です")
    @Min(value = 1, message = "優先度は1以上で設定してください")
    @Max(value = 10, message = "優先度は10以下で設定してください")
    private Integer priority = 5;

    /**
     * ステータス
     */
    @Column(name = "status", nullable = false, length = 20)
    @NotNull(message = "ステータスは必須です")
    @Enumerated(EnumType.STRING)
    private FaqStatus status = FaqStatus.DRAFT;

    /**
     * 言語
     */
    @Column(name = "language", nullable = false, length = 10)
    @NotBlank(message = "言語は必須です")
    @Pattern(regexp = "^(ja|en|zh|ko)$", message = "対応言語: ja, en, zh, ko")
    private String language = "ja";

    /**
     * 検索ベクトル（全文検索用）
     */
    @Column(name = "search_vector", length = 1000)
    private String searchVector;

    /**
     * 人気度スコア（0.0-10.0）
     */
    @Column(name = "popularity_score", precision = 5, scale = 2)
    @DecimalMin(value = "0.0", message = "人気度スコアは0.0以上で設定してください")
    @DecimalMax(value = "10.0", message = "人気度スコアは10.0以下で設定してください")
    private BigDecimal popularityScore = BigDecimal.ZERO;

    /**
     * 有用性スコア（0.0-10.0）
     */
    @Column(name = "usefulness_score", precision = 5, scale = 2)
    @DecimalMin(value = "0.0", message = "有用性スコアは0.0以上で設定してください")
    @DecimalMax(value = "10.0", message = "有用性スコアは10.0以下で設定してください")
    private BigDecimal usefulnessScore = BigDecimal.ZERO;

    /**
     * 閲覧数
     */
    @Column(name = "view_count", nullable = false)
    @Min(value = 0, message = "閲覧数は0以上で設定してください")
    private Long viewCount = 0L;

    /**
     * 「役に立った」投票数
     */
    @Column(name = "helpful_count", nullable = false)
    @Min(value = 0, message = "役に立った数は0以上で設定してください")
    private Long helpfulCount = 0L;

    /**
     * 「役に立たなかった」投票数
     */
    @Column(name = "not_helpful_count", nullable = false)
    @Min(value = 0, message = "役に立たなかった数は0以上で設定してください")
    private Long notHelpfulCount = 0L;

    /**
     * AI自動生成フラグ
     */
    @Column(name = "is_auto_generated", nullable = false)
    private Boolean isAutoGenerated = false;

    /**
     * AI生成時の信頼度（0.0-1.0）
     */
    @Column(name = "ai_confidence", precision = 5, scale = 4)
    @DecimalMin(value = "0.0", message = "AI信頼度は0.0以上で設定してください")
    @DecimalMax(value = "1.0", message = "AI信頼度は1.0以下で設定してください")
    private BigDecimal aiConfidence;

    /**
     * AI生成に使用したモデル
     */
    @Column(name = "ai_model", length = 100)
    @Size(max = 100, message = "AIモデル名は100文字以内で入力してください")
    private String aiModel;

    /**
     * AI生成元データ（JSON形式）
     */
    @Column(name = "ai_source_data", columnDefinition = "TEXT")
    @Size(max = 10000, message = "AI生成元データは10000文字以内で入力してください")
    private String aiSourceData;

    /**
     * AIメタデータ（JSON形式）
     */
    @Column(name = "ai_metadata", columnDefinition = "TEXT")
    @Size(max = 5000, message = "AIメタデータは5000文字以内で入力してください")
    private String aiMetadata;

    /**
     * 関連FAQ（カンマ区切りのID）
     */
    @Column(name = "related_faq_ids", length = 500)
    @Size(max = 500, message = "関連FAQ IDsは500文字以内で入力してください")
    private String relatedFaqIds;

    /**
     * キーワード（検索用）
     */
    @Column(name = "keywords", length = 1000)
    @Size(max = 1000, message = "キーワードは1000文字以内で入力してください")
    private String keywords;

    /**
     * 最終更新者
     */
    @Column(name = "last_updated_by")
    private UUID lastUpdatedBy;

    /**
     * 承認者
     */
    @Column(name = "approved_by")
    private UUID approvedBy;

    /**
     * 承認日時
     */
    @Column(name = "approved_at")
    private LocalDateTime approvedAt;

    /**
     * 無効化理由
     */
    @Column(name = "deactivation_reason", length = 500)
    @Size(max = 500, message = "無効化理由は500文字以内で入力してください")
    private String deactivationReason;

    /**
     * 最終AI更新日時
     */
    @Column(name = "last_ai_update_at")
    private LocalDateTime lastAiUpdateAt;

    /**
     * 次回AI更新予定日時
     */
    @Column(name = "next_ai_update_at")
    private LocalDateTime nextAiUpdateAt;

    /**
     * 自動更新フラグ
     */
    @Column(name = "auto_update_enabled", nullable = false)
    private Boolean autoUpdateEnabled = true;

    /**
     * 削除日時（論理削除）
     */
    @Column(name = "deleted_at")
    private LocalDateTime deletedAt;

    /**
     * 作成日時
     */
    @Column(name = "created_at", nullable = false, updatable = false)
    @CreationTimestamp
    private LocalDateTime createdAt;

    /**
     * 更新日時
     */
    @Column(name = "updated_at", nullable = false)
    @UpdateTimestamp
    private LocalDateTime updatedAt;

    // ========== Enum定義 ==========

    /**
     * FAQカテゴリー
     */
    public enum FaqCategory {
        GETTING_STARTED("はじめに"),
        ACCOUNT_MANAGEMENT("アカウント管理"),
        CHARACTER_CREATION("キャラクター作成"),
        CONTENT_UPLOAD("コンテンツアップロード"),
        COMMUNITY_FEATURES("コミュニティ機能"),
        MONETIZATION("収益化"),
        TECHNICAL_SUPPORT("技術サポート"),
        BILLING_PAYMENT("請求・支払い"),
        PRIVACY_SECURITY("プライバシー・セキュリティ"),
        API_INTEGRATION("API連携"),
        MOBILE_APP("モバイルアプリ"),
        TROUBLESHOOTING("トラブルシューティング"),
        BEST_PRACTICES("ベストプラクティス"),
        POLICIES_GUIDELINES("ポリシー・ガイドライン"),
        UPDATES_ANNOUNCEMENTS("更新・お知らせ");

        private final String displayName;

        FaqCategory(String displayName) {
            this.displayName = displayName;
        }

        public String getDisplayName() {
            return displayName;
        }
    }

    /**
     * FAQステータス
     */
    public enum FaqStatus {
        DRAFT("下書き"),
        PENDING_REVIEW("レビュー待ち"),
        APPROVED("承認済み"),
        PUBLISHED("公開"),
        ARCHIVED("アーカイブ"),
        DEPRECATED("非推奨"),
        NEEDS_UPDATE("更新必要"),
        UNDER_REVISION("改訂中");

        private final String displayName;

        FaqStatus(String displayName) {
            this.displayName = displayName;
        }

        public String getDisplayName() {
            return displayName;
        }
    }

    // ========== ビジネスロジックメソッド ==========

    /**
     * FAQを公開する
     */
    public void publish(UUID approver) {
        this.status = FaqStatus.PUBLISHED;
        this.approvedBy = approver;
        this.approvedAt = LocalDateTime.now();
    }

    /**
     * FAQをアーカイブする
     */
    public void archive(String reason) {
        this.status = FaqStatus.ARCHIVED;
        this.deactivationReason = reason;
    }

    /**
     * 閲覧数を増加させる
     */
    public void incrementViewCount() {
        this.viewCount++;
    }

    /**
     * 役に立った投票を追加
     */
    public void addHelpfulVote() {
        this.helpfulCount++;
        updateUsefulnessScore();
    }

    /**
     * 役に立たなかった投票を追加
     */
    public void addNotHelpfulVote() {
        this.notHelpfulCount++;
        updateUsefulnessScore();
    }

    /**
     * 有用性スコアを更新
     */
    private void updateUsefulnessScore() {
        long totalVotes = this.helpfulCount + this.notHelpfulCount;
        if (totalVotes > 0) {
            double score = (double) this.helpfulCount / totalVotes * 10.0;
            this.usefulnessScore = BigDecimal.valueOf(score).setScale(2, java.math.RoundingMode.HALF_UP);
        }
    }

    /**
     * 検索ベクトルを更新
     */
    public void updateSearchVector() {
        String vector = String.join(" ",
                this.question,
                this.answer,
                this.category.name(),
                this.subCategory != null ? this.subCategory : "",
                this.tags != null ? this.tags : "",
                this.keywords != null ? this.keywords : "").toLowerCase();
        this.searchVector = vector;
    }

    /**
     * AI更新スケジュールを設定
     */
    public void scheduleNextAiUpdate(int daysFromNow) {
        this.nextAiUpdateAt = LocalDateTime.now().plusDays(daysFromNow);
    }

    /**
     * 削除済みかどうかを確認
     */
    public boolean isDeleted() {
        return this.deletedAt != null;
    }

    /**
     * 公開中かどうかを確認
     */
    public boolean isPublished() {
        return this.status == FaqStatus.PUBLISHED && !isDeleted();
    }

    /**
     * AI生成済みかどうかを確認
     */
    public boolean isAiGenerated() {
        return Boolean.TRUE.equals(this.isAutoGenerated);
    }

    /**
     * 論理削除
     */
    public void softDelete() {
        this.deletedAt = LocalDateTime.now();
    }

    /**
     * 削除を取り消し
     */
    public void restore() {
        this.deletedAt = null;
    }
}
